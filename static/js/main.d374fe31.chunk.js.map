{"version":3,"sources":["components/header/search/index.js","components/header/index.js","components/content/list/todoItem/index.js","components/content/list/index.js","components/content/index.js","components/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Search","enterPress","event","key","_this","props","target","value","react_default","a","createElement","type","onKeyPress","this","className","placeholder","required","autoComplete","Component","Header","header_search","todo","add","ToDoItem","checkboxCheck","item","status","id","clickDelete","onChange","checked","text","onClick","List","title","list","filter","length","map","list_todoItem","finish","delete","Content","content_list","Footer","clear","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","preState","newTodo","assign","push","Date","getTime","components_header","components_content","components_footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d374fe31.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './index.css'\r\nclass Search extends Component {\r\n    enterPress = (event) => {\r\n        if(event.key === 'Enter') {\r\n            this.props.enterPress(event.target.value)\r\n            event.target.value = ''\r\n        }\r\n    }\r\n    render() {\r\n        return (<input type=\"text\" onKeyPress={this.enterPress} className=\"search\" placeholder=\"添加ToDo\" required=\"required\" autoComplete=\"off\"></input>)\r\n    }\r\n}\r\n\r\nexport default Search","import React, { Component } from 'react'\r\nimport Search from './search'\r\nimport './index.css'\r\nclass Header extends Component {\r\n    render() {\r\n        return (<div className=\"header\">\r\n            <div className=\"header-content\">\r\n                <div className=\"header-title\">ToDoList</div>\r\n                <Search enterPress={this.props.todo.add}/>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react'\r\nimport './index.css'\r\n\r\nclass ToDoItem extends Component {\r\n    checkboxCheck = () => {\r\n        this.props.item.status === 'working' && this.props.checkboxCheck(this.props.item.id)\r\n    }\r\n    clickDelete = () => {\r\n        this.props.clickDelete(this.props.item.id)\r\n    }\r\n    render() {\r\n        return (<div className={'ToDoItem' + (this.props.item.status === 'finished' ? ' ToDoItem-finish' : '')}>\r\n           <input type=\"checkbox\" onChange={this.checkboxCheck} checked={this.props.item.status === 'finished'} ></input>\r\n           <p>{this.props.item.text}</p>\r\n           <span onClick={this.clickDelete}>-</span> \r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default ToDoItem ","import React, { Component } from 'react'\r\nimport TodoItem from './todoItem'\r\nimport './index.css'\r\n\r\nclass List extends Component {\r\n    render() {\r\n        return (<div className=\"list\">\r\n            <h2 className=\"list-title\">\r\n                {this.props.title}\r\n                <span className=\"title-numb\">{this.props.todo.list.filter(item => {\r\n                    return item.status === this.props.status\r\n                }).length}</span>    \r\n            </h2>\r\n            <div>\r\n                {\r\n                    this.props.todo.list.filter(item => {\r\n                        return item.status === this.props.status\r\n                    }).map(item => {\r\n                        return <TodoItem item={item} checkboxCheck={this.props.todo.finish} key={item.id} clickDelete={this.props.todo.delete}/>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default List","import React, { Component } from 'react'\r\nimport List from './list'\r\nimport './index.css'\r\nclass Content extends Component{\r\n    render() {\r\n        return (<div className=\"content\">\r\n            <List title=\"正在进行\" todo={this.props.todo} status=\"working\"/>\r\n            <List title=\"已经完成\" todo={this.props.todo} status=\"finished\"/>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Content","import React, { Component } from 'react'\r\nimport './index.css'\r\n\r\nclass Footer extends Component {\r\n    clear = () => {\r\n        this.props.clear()\r\n    }\r\n    render() {\r\n        return (<div className=\"footer\">Copyright © 2014 todolist.cn <span className=\"clear-btn\" onClick={this.clear}>clear</span></div>)\r\n    }\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react';\r\n\r\nimport Header from './components/header'\r\nimport Content from './components/content'\r\nimport Footer from './components/footer' \r\n\r\nimport './App.css';\r\nclass App extends Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      todo: {\r\n        list: [],\r\n        add: (item) => {\r\n          this.setState(preState => {\r\n            let newTodo = preState.todo\r\n            let list = Object.assign([], newTodo.list)\r\n            list.push({\r\n              text: item,\r\n              id: new Date().getTime(),\r\n              status: 'working'\r\n            })\r\n            newTodo.list = list\r\n            return {\r\n              todo: newTodo\r\n            }\r\n          })\r\n        },\r\n        delete: (id) => {\r\n          this.setState(preState => {\r\n            let newTodo = preState.todo\r\n            let list = newTodo.list.filter(item => id !== item.id)\r\n            newTodo.list = list\r\n            return {\r\n              todo: newTodo\r\n            }\r\n          })\r\n        },\r\n        finish: (id) => {\r\n          this.setState(preState => {\r\n            let newTodo = preState.todo\r\n            let list = newTodo.list.map(item => {\r\n              if(item.id === id) {\r\n                item.status = 'finished'\r\n              }\r\n              return item\r\n            })\r\n            newTodo.list = list\r\n            return {\r\n              todo: newTodo\r\n            }\r\n          })\r\n        },\r\n        clear: () => {\r\n          this.setState(preState => {\r\n            let newTodo = preState.todo\r\n            newTodo.list = []\r\n            return {\r\n              todo: newTodo\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header todo={this.state.todo}></Header>\r\n        <Content todo={this.state.todo}></Content>\r\n        <Footer clear={this.state.todo.clear}></Footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}